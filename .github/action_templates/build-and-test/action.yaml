name: build and test template
description: "A template to build and test docker image based on provided inputs"

inputs:
  docker-auth-token:
    description: 'Docker Hub authentication token'
    required: true
  image-name:
    description: 'image name to be built'
    required: true
  dockerfile-name:
    description: 'The name of dockerfile to use'
    required: true
  platform:
    description: 'The platform to build'
    required: false
  
outputs:
  tag-name:
    description: "The tag name used for the image"
    value: ${{ steps.set-outputs.outputs.tag-name }}

runs:
  using: "composite"
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Set env vars for main branch
      shell: bash
      run: |
        echo "TAG_NAME=latest" >> "$GITHUB_ENV"
      if: startsWith(github.ref, 'refs/heads/main')
    - name: Set env vars for other branch
      shell: bash
      run: |
        echo "TAG_NAME=${GITHUB_REF##*/}" >> "$GITHUB_ENV"
      if: ${{ !startsWith(github.ref, 'refs/heads/main') }}
    
    - name: Set outputs
      id: set-outputs
      shell: bash
      run: |
        echo "Current TAG_NAME from env: ${{ env.TAG_NAME }}"
        echo "tag-name=${{ env.TAG_NAME }}" >> $GITHUB_OUTPUT

    - name: Attach platform to tag
      shell: bash
      run: |
        echo "TAG_NAME=${{env.TAG_NAME}}-${{inputs.platform}}" >> "$GITHUB_ENV"

    - name: Login to Docker Hub
      shell: bash
      run: |
          echo "Logging in to Docker Hub..."
          if ! echo "${{ inputs.docker-auth-token }}" | docker login --username awiciroh --password-stdin; then
            echo "Failed to login to Docker Hub"
            exit 1
          fi
          echo "Successfully logged in to Docker Hub"
          docker info

    - name: Create Cache and Builder for Buildx
      shell: bash
      run: |
          docker buildx create --use --name mybuilder --node mybuilder

    - name: Build and Cache Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./docker
        file: ./docker/${{ inputs.dockerfile-name}}
        push: true
        tags: |
          awiciroh/${{ inputs.image-name}}:${{ env.TAG_NAME}}
        builder: mybuilder
        no-cache: true
        platforms: linux/${{ inputs.platform }}
        provenance: false
      env:
        DOCKER_BUILDKIT: 1
        DOCKER_CLI_EXPERIMENTAL: enabled
    - name: Test
      shell: bash
      run: |
        rm -rf /home/ubuntu/workspace/AWI_16_2863657_007/*.csv
        rm -rf /home/ubuntu/workspace/AWI_16_2863657_007/*.parquet
        rm -rf /home/ubuntu/workspace/AWI_16_2863657_007/outputs/*/*
        rm -rf /home/ubuntu/workspace/AWI_16_2863806_008/*.csv
        rm -rf /home/ubuntu/workspace/AWI_16_2863806_008/*.parquet
        rm -rf /home/ubuntu/workspace/AWI_16_2863806_008/outputs/*/*
        docker run --rm -v /home/ubuntu/workspace/AWI_16_2863657_007:/ngen/ngen/data awiciroh/${{ inputs.image-name}}:${{ env.TAG_NAME}} /ngen/ngen/data auto
        docker run --rm -v /home/ubuntu/workspace/AWI_16_2863806_008:/ngen/ngen/data awiciroh/${{ inputs.image-name}}:${{ env.TAG_NAME}} /ngen/ngen/data auto
      if: inputs.image-name == 'ciroh-ngen-image'
